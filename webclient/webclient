import bottle
import dbinterface
import Secure
import time
import datetime

db = dbinterface.DB()
bottle.debug(True)




@bottle.route('/hello')
def hello():
    return "Hello World!"

@bottle.route('/')
def loginForm():
    return bottle.template('Index')


@bottle.route('/menu')
def main_menu():
    return bottle.template('MainMenu')




@bottle.route('/Analytics')
def analytics_page():
    allUsers = db.grabUserList()
    return bottle.template('AnalyticsRoute', userList=allUsers)

@bottle.post('/Analytics')
def analyze():
    #Grabbing forms from request.
    userID = bottle.request.forms.get('selecteduser')
    startDate = bottle.request.forms.get('from')
    endDate = bottle.request.forms.get('to')

    #this checks the cases where the dates are not selected properly by the user, and puts in assumed data(i.e. today, a month ago, whateva whateva i do what i want)
    if len(startDate) > 5 > len(endDate):
        endDate = datetime.datetime.now().strftime('%Y-%m-%d')
        print("Start date is: " + startDate)
        print("End date is: " + endDate)
    elif len(startDate) < 5 and len(endDate)< 5:
        endDate = datetime.datetime.now()
        startDate = endDate - datetime.timedelta(days = 30)
        endDate = endDate.strftime('%Y-%m-%d')
        startDate = startDate.strftime('%Y-%m-%d')
        print("Start date is: " + startDate)
        print("End date is: " + endDate)



    ############################################
    #analytics Data initialization             #
    #this is just for passing into the template#
    ############################################
    dateRange = [startDate, endDate]
    selectedUser = db.grabUserNameByUserID(userID)
    allUsers = db.grabUserList()
    workedShiftCount = db.grabShiftCountForUserWithinDates(startDate, endDate, userID)
    allShifts = db.grabAllShiftsByUserID(userID)
    allShiftsWithinDates = db.grabAllShiftsForUserWithinDates(startDate,endDate, userID)
    monthlyShiftCount = db.grabAllShiftsByMonthByUserID(userID)


    dayNightDict = {'Day' : 0, 'Night' : 0 }

    for shift in allShiftsWithinDates:
        start_time = int(shift[3].split(' ')[1].split(':')[0])
        if start_time <= 12:
            dayNightDict['Day'] += 1
        elif start_time > 12:
            dayNightDict['Night'] += 1



    ################################


    return bottle.template('Analytics', shiftCount= workedShiftCount,
                           dict = monthlyShiftCount,
                           userList = allUsers,
                           dayNightRatio = dayNightDict,
                           dates = dateRange,
                           shiftList = allShiftsWithinDates,
                           user = selectedUser)


@bottle.route('/static/:path#.+#', name='static')
def static(path):
    return bottle.static_file(path, root='./static/')

@bottle.route('/overview')
def overview_page():
    pass




@bottle.post('/Registering')
def registering():
    userFN = bottle.request.forms.get('First Name')
    userLN = bottle.request.forms.get('Last Name')
    userWG = bottle.request.forms.get('Wage')
    userAD = bottle.request.forms.get('Address')
    userSN = bottle.request.forms.get('SIN')
    userPW = bottle.request.forms.get('Password')
    userPC = bottle.request.forms.get('Confirm Password')
    if (userPW != userPC):
        return "Passwords do not match! Go back and correct the issue."
    else:
        securePW = Secure.SecureIt(userPW)
        try:
            db.createUser(userFN,userLN, userAD, userSN, userWG)
        except ValueError:
            return '''<p>Invalid information. Please Retry. Every field must be populated, wage must be a number, and sin must be exactly nine numbers.  </p>'''







@bottle.route('/Register')
def register_employee():
    return bottle.template('Register')





@bottle.post('/login')
def login_submit():
    """
    Throws the attempted password off to Check_Login() and returns the result.
    :return the main menu on correct login or a failure message on bad credentials
    """
    name     = bottle.request.forms.get('name')
    password = bottle.request.forms.get('password')
    databasePassword = db.grabPW(name)
    if databasePassword is None:
        return "Couldnt find user in DB Named: %s" %name
    else:
        print("Success!!")
        print(databasePassword)
        if check_login(password, databasePassword):
            return '''<p>Your login was correct</p>
            <a href="/menu">Main Menu</a>
            '''
        else:
            return "<p>Login failed</p>"



def check_login(givenPassword, hashedPassword):
    return Secure.Compare(Secure.SecureIt(givenPassword), hashedPassword)




bottle.run(host='localhost', port=8082)

